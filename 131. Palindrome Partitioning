Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]



class Solution {
    public static boolean isPossible(String s,int start,int end){
        while(start<=end){
            if(s.charAt(start++)!=s.charAt(end--)) return false;
        }
        return true;
    }
    public static void fun(int ind,String s,List<String>path,List<List<String>>ans){
        if(ind==s.length()){
            ans.add(new ArrayList<>(path));
        }

        for(int i=ind;i<s.length();i++){
            if(isPossible(s,ind,i)){
                path.add(s.substring(ind,i+1));
                fun(i+1,s,path,ans);
                path.remove(path.size()-1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        List<List<String>> ans=new ArrayList<>();
        List<String>path=new ArrayList<>();
        fun(0,s,path,ans);
        return ans;
    }
}
