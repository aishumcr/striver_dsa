Given an N x M matrix, with a few hurdles(denoted by 0) arbitrarily placed, calculate the length of the longest possible route possible from source(xs,ys) to a destination(xd,yd) within the matrix. We are allowed to move to only adjacent cells which are not hurdles. The route cannot contain any diagonal moves and a location once visited in a particular path cannot be visited again.If it is impossible to reach the destination from the source return -1.

 

Example 1:

Input:
{xs,ys} = {0,0}
{xd,yd} = {1,7}
matrix = 1 1 1 1 1 1 1 1 1 1
         1 1 0 1 1 0 1 1 0 1
         1 1 1 1 1 1 1 1 1 1
Output: 24
class Solution {
    public static int recur(int[][] mat,int i,int j,int n,int m,int xd,int yd,int curr,int ans){
        if(i==xd && j==yd){
            if(curr>ans){
                ans=curr;
            }
            return ans;
        }
        if(mat[i][j]==0 || mat[xd][yd]==0) return ans;
        mat[i][j]=0;
        //right
        if(j!=m-1 && mat[i][j+1]>0){
            ans=recur(mat,i,j+1,n,m,xd,yd,curr+1,ans);
        }
        //down
        if(i!=n-1 && mat[i+1][j]>0){
            ans=recur(mat,i+1,j,n,m,xd,yd,curr+1,ans);
        }
        //left
        if(j>0 && mat[i][j-1]>0){
            ans=recur(mat,i,j-1,n,m,xd,yd,curr+1,ans);
        }
        //up
        if(i>0 && mat[i-1][j]>0){
            ans=recur(mat,i-1,j,n,m,xd,yd,curr+1,ans);
        }
        mat[i][j]=1;
        return ans;
    }
    public static int longestPath(int[][] mat,int n,int m,int xs,int ys,int xd,int yd) {
        return recur(mat,xs,ys,n,m,xd,yd,0,-1);
    }
}
     
