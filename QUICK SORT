QUICK SORT 

PIVOT AS FIRST ELEMENT 



import java.util.* ;
import java.io.*; 
public class Solution {
    public static void swap(int i,int j,List<Integer>arr){
        int temp=arr.get(i);
        arr.set(i,arr.get(j));
        arr.set(j,temp);
    }
    public static int partition(List<Integer> arr,int low,int high){
        int pivot=arr.get(low);
        int i=low,j=high;
        while(i<j){
            while(arr.get(i)<=pivot && i<=high-1){
                i++;
            }
            while(arr.get(j)>pivot && j>=low+1){
                j--;
            }
            if(i<j)swap(i,j,arr);
        }
        swap(low,j,arr);
        return j;
    }
    public static void qs(List<Integer> arr,int low,int high){
        if(low<high){
            int p=partition(arr,low,high);
            qs(arr,low,p-1);
            qs(arr,p+1,high);
        }
    }
    public static List<Integer> quickSort(List<Integer> arr){
        qs(arr,0,arr.size()-1);
        return arr;
    }
}

PIVOT AS LAST ELEMENT 




import java.util.* ;
import java.io.*; 
public class Solution {
    public static void swap(int i,int j,List<Integer>arr){
        int temp=arr.get(i);
        arr.set(i,arr.get(j));
        arr.set(j,temp);
    }
    public static int partition(List<Integer> arr,int low,int high){
        int pivot=arr.get(high);
        int i=low,j=low;
        while(i<high){
            if(arr.get(i)<=pivot){
                swap(i,j,arr);
                j++;
            }
            i++;
        }
        swap(high,j,arr);
        return j;
    }
    public static void qs(List<Integer> arr,int low,int high){
        if(low<high){
            int p=partition(arr,low,high);
            qs(arr,low,p-1);
            qs(arr,p+1,high);
        }
    }
    public static List<Integer> quickSort(List<Integer> arr){
        qs(arr,0,arr.size()-1);
        return arr;
    }
}
