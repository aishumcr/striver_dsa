Given an integer array a[ ] of N elements and an integer K, the task is to check if the array a[ ] could be divided into K non-empty subsets with equal sum of elements.
Note: All elements of this array should be part of exactly one partition.

Example 1:

Input: 
N = 5
a[] = {2,1,4,5,6}
K = 3
Output: 
1
Explanation: we can divide above array 
into 3 parts with equal sum as (2, 4), 
(1, 5), (6)


class Solution
{
    public static void recur(int[] a,int n,int k,int curr_sum,int target,boolean[] ans,int count,int[] freq){
      if(curr_sum>target){
          return ;
      }
      if(count==k-1){
          ans[0]=true;
          return ;
      }
      if(curr_sum==target){
          count+=1;
          recur(a,n,k,0,target,ans,count,freq);
          if(ans[0]==true){
              return ;
          }
      }
      
      for(int i=0;i<n;i++){
          if(freq[i]==0){
             freq[i]=1;
             recur(a,n,k,curr_sum+a[i],target,ans,count,freq);
             if(ans[0]==true) return ;
             freq[i]=0;
          }
      }
      return ;
    }
    public boolean isKPartitionPossible(int a[], int n, int k)
    {
		if(k>n) return false;
		if(k==1) return true;
		int sum=0;
		for(int i=0;i<n;i++) sum+=a[i];
		if(sum%k!=0) return false;
		boolean[] ans=new boolean[1];
		ans[0]=false;
		int[] freq=new int[n];
		recur(a,n,k,0,sum/k,ans,0,freq);
		return ans[0];
		
    }
}
